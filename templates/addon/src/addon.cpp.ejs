#include <v8.h>
#include <node.h>

using namespace v8;
using namespace node;

<% classes.forEach(function(cls) { %>
#include "<%- cls.name %>.h"
<% }); %>


// Function factory
Handle<Value> CreateFunction(const Arguments& args, std::string name, Handle<Value> (*func)(const Arguments&) ) {
  HandleScope scope;

  Local<FunctionTemplate> tpl = FunctionTemplate::New(func);
  Local<Function> fn = tpl->GetFunction();
  fn->SetName(String::NewSymbol(name));

  return scope.Close(fn);
}

// Object factory
Handle<Value> CreateObject(const Arguments& args) {
  HandleScope scope;

  Local<Object> obj = Object::New();

  return scope.Close(obj);
}

// module.exports = ...
<% classes.forEach(function(cls) { %>
void <%- cls.name%>Init(Handle<Object> exports, Handle<Object> module) {
  exports->Set(String::NewSymbol("<%- cls.name %>"), FunctionTemplate::New(<%- cls.name %>)->GetFunction());
}
<% }); %>


extern "C" {
  static void init(Handle<Object> exports, Handle<Object> module) {
    <% classes.forEach(function(cls) { %>
    <%- cls.name %>::<%- cls.name %>Init(exports, module);
    <% }); %>
  }

  NODE_MODULE(<%- name %>, init);
}

